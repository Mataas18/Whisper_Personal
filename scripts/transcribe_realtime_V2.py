import whisper
import pyaudio
import wave
import threading
import time
import os
from datetime import datetime
import keyboard
import numpy as np
import json
import re

class RealtimeTranscriber:
    def __init__(self, model_size="base", language="es"):
        self.model_size = model_size
        self.language = language
        self.model = None
        self.is_recording = False
        self.audio_frames = []
        
        # Obtener la ruta ra√≠z del proyecto (un nivel arriba de scripts)
        self.project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        
        # Configuraci√≥n de audio (mejorada)
        self.audio_quality = "ultra"  # low, medium, high, ultra
        self.setup_audio_config()
        
        # Palabras clave importantes (personalizables)
        self.keywords = [
            "importante", "urgente", "cr√≠tico", "clave", "fundamental",
            "decisi√≥n", "problema", "soluci√≥n", "acci√≥n", "tarea",
            "fecha", "plazo", "deadline", "reuni√≥n", "contactar",
            "presupuesto", "coste", "precio", "dinero", "euro",
            "nombre", "tel√©fono", "email", "direcci√≥n"
        ]
        
        self.audio = pyaudio.PyAudio()
        self.stream = None
        
    def setup_audio_config(self):
        """Configurar calidad de audio"""
        quality_configs = {
            "low": {"rate": 8000, "chunk": 512},
            "medium": {"rate": 16000, "chunk": 1024},
            "high": {"rate": 44100, "chunk": 2048},
            "ultra": {"rate": 48000, "chunk": 4096}
        }
        
        config = quality_configs.get(self.audio_quality, quality_configs["medium"])
        self.CHUNK = config["chunk"]
        self.RATE = config["rate"]
        self.FORMAT = pyaudio.paInt16
        self.CHANNELS = 1
        
    def detect_silence(self, audio_data):
        """Detectar silencio en los datos de audio - CORREGIDO"""
        if not self.silence_detection:
            return False
            
        # Convertir bytes a numpy array
        audio_np = np.frombuffer(audio_data, dtype=np.int16)
        
        # Calcular RMS (Root Mean Square) para detectar volumen
        rms = np.sqrt(np.mean(audio_np**2))
        
        # Normalizar RMS a escala 0-1
        # Para int16, el rango m√°ximo es -32768 a 32767
        normalized_rms = rms / 32768.0
        
        # DEBUG: Mostrar nivel de audio actual (opcional)
        # print(f"\rNivel audio: {normalized_rms:.4f} | Umbral: {self.silence_threshold}", end="")
        
        return normalized_rms < self.silence_threshold
        
    def extract_keywords(self, text):
        """Extraer palabras clave del texto"""
        found_keywords = []
        text_lower = text.lower()
        
        for keyword in self.keywords:
            if keyword.lower() in text_lower:
                # Encontrar contexto (frase completa)
                sentences = re.split(r'[.!?]+', text)
                for sentence in sentences:
                    if keyword.lower() in sentence.lower():
                        found_keywords.append({
                            "keyword": keyword,
                            "context": sentence.strip(),
                            "position": text_lower.find(keyword.lower())
                        })
        
        return found_keywords
        
    def analyze_confidence(self, result):
        """Analizar confianza de cada segmento"""
        segments_info = []
        
        if hasattr(result, 'segments') and result.segments:
            for segment in result.segments:
                segment_info = {
                    "start": segment.start,
                    "end": segment.end,
                    "text": segment.text,
                    "confidence": getattr(segment, 'avg_logprob', 0),
                    "no_speech_prob": getattr(segment, 'no_speech_prob', 0)
                }
                
                # Clasificar confianza
                confidence = segment_info["confidence"]
                if confidence > -0.5:
                    confidence_level = "üü¢ Alta"
                elif confidence > -1.0:
                    confidence_level = "üü° Media"
                else:
                    confidence_level = "üî¥ Baja"
                    
                segment_info["confidence_level"] = confidence_level
                segments_info.append(segment_info)
        
        return segments_info
        
    def load_model(self):
        """Cargar modelo de Whisper"""
        print(f"Cargando modelo {self.model_size}...")
        self.model = whisper.load_model(self.model_size)
        print("Modelo cargado correctamente!")
        
    def start_recording(self):
        """Iniciar grabaci√≥n manual (sin detecci√≥n autom√°tica de silencio)"""
        self.is_recording = True
        self.audio_frames = []
        
        self.stream = self.audio.open(
            format=self.FORMAT,
            channels=self.CHANNELS,
            rate=self.RATE,
            input=True,
            frames_per_buffer=self.CHUNK
        )
        
        print(f"üé§ Grabando... (Calidad: {self.audio_quality}, {self.RATE}Hz)")
        print("üî¥ GRABACI√ìN ACTIVA - Presiona ESPACIO para parar, ESC para salir")
        
        while self.is_recording:
            try:
                data = self.stream.read(self.CHUNK, exception_on_overflow=False)
                self.audio_frames.append(data)
                        
            except Exception as e:
                print(f"\nError en grabaci√≥n: {e}")
                break
                
    def stop_recording(self):
        """Detener grabaci√≥n"""
        self.is_recording = False
        if self.stream:
            self.stream.stop_stream()
            self.stream.close()
            
    def save_audio(self, filename):
        """Guardar audio grabado con validaci√≥n mejorada"""
        # Crear carpeta audio en la ra√≠z del proyecto
        audio_dir = os.path.join(self.project_root, "audio")
        os.makedirs(audio_dir, exist_ok=True)
        filepath = os.path.join(audio_dir, filename)
        
        try:
            wf = wave.open(filepath, 'wb')
            wf.setnchannels(self.CHANNELS)
            wf.setsampwidth(self.audio.get_sample_size(self.FORMAT))
            wf.setframerate(self.RATE)
            wf.writeframes(b''.join(self.audio_frames))
            wf.close()
            
            # VALIDACI√ìN MEJORADA DEL ARCHIVO
            print(f"üìä Validando archivo de audio...")
            
            # Verificar que el archivo existe
            if not os.path.exists(filepath):
                raise FileNotFoundError(f"El archivo no se cre√≥ correctamente: {filepath}")
            
            # Verificar el tama√±o del archivo
            file_size = os.path.getsize(filepath)
            print(f"   ‚Ä¢ Tama√±o del archivo: {file_size} bytes")
            
            if file_size < 1000:  # Menos de 1KB
                print("   ‚ö†Ô∏è  ADVERTENCIA: Archivo muy peque√±o, puede estar vac√≠o")
            
            # Verificar que se puede leer como WAV
            try:
                with wave.open(filepath, 'rb') as test_wav:
                    frames = test_wav.getnframes()
                    sample_rate = test_wav.getframerate()
                    channels = test_wav.getnchannels()
                    duration = frames / sample_rate
                    
                    print(f"   ‚Ä¢ Duraci√≥n: {duration:.2f} segundos")
                    print(f"   ‚Ä¢ Sample rate: {sample_rate} Hz")
                    print(f"   ‚Ä¢ Canales: {channels}")
                    print(f"   ‚Ä¢ Frames: {frames}")
                    
                    if duration < 0.1:
                        print("   ‚ö†Ô∏è  ADVERTENCIA: Duraci√≥n muy corta")
                        
            except Exception as wav_error:
                print(f"   ‚ùå ERROR: No se puede leer como archivo WAV v√°lido: {wav_error}")
                raise
            
            # Verificar permisos de lectura
            if not os.access(filepath, os.R_OK):
                print(f"   ‚ùå ERROR: No hay permisos de lectura para el archivo")
                raise PermissionError(f"Sin permisos de lectura: {filepath}")
            
            print(f"   ‚úÖ Archivo v√°lido y listo para transcripci√≥n")
            
        except Exception as e:
            print(f"‚ùå Error al guardar audio: {e}")
            raise
        
        return filepath
        
    def transcribe_audio(self, audio_path):
        """Transcribir audio con diagn√≥stico mejorado"""
        print("üîÑ Transcribiendo...")
        
        # DIAGN√ìSTICO PREVIO A LA TRANSCRIPCI√ìN
        print(f"üîç Diagn√≥stico del archivo:")
        print(f"   ‚Ä¢ Ruta: {audio_path}")
        print(f"   ‚Ä¢ Existe: {os.path.exists(audio_path)}")
        print(f"   ‚Ä¢ Ruta absoluta: {os.path.abspath(audio_path)}")
        print(f"   ‚Ä¢ Directorio de trabajo: {os.getcwd()}")
        
        if os.path.exists(audio_path):
            print(f"   ‚Ä¢ Tama√±o: {os.path.getsize(audio_path)} bytes")
            print(f"   ‚Ä¢ Permisos de lectura: {os.access(audio_path, os.R_OK)}")
        
        # Verificar que el modelo est√° cargado
        if self.model is None:
            print("‚ùå ERROR: El modelo no est√° cargado")
            raise RuntimeError("Modelo no cargado")
        
        try:
            # Intentar cargar el archivo antes de la transcripci√≥n
            print("üîÑ Verificando carga del archivo...")
            
            # Usar ruta absoluta para evitar problemas
            abs_path = os.path.abspath(audio_path)
            print(f"   ‚Ä¢ Usando ruta absoluta: {abs_path}")
            
            # Verificar que Whisper puede acceder al archivo
            import librosa
            try:
                # Intentar cargar con librosa (que usa Whisper internamente)
                y, sr = librosa.load(abs_path, sr=None)
                print(f"   ‚Ä¢ Carga con librosa exitosa: {len(y)} samples, {sr} Hz")
            except Exception as librosa_error:
                print(f"   ‚ùå Error con librosa: {librosa_error}")
                # Intentar con una copia temporal
                print("   üîÑ Intentando crear copia temporal...")
                temp_path = abs_path.replace('.wav', '_temp.wav')
                import shutil
                shutil.copy2(abs_path, temp_path)
                abs_path = temp_path
                print(f"   ‚Ä¢ Usando archivo temporal: {abs_path}")
            
            # Transcribir con configuraci√≥n robusta
            result = self.model.transcribe(
                abs_path,
                language=self.language,
                word_timestamps=True,
                verbose=True,  # Activar verbose para m√°s informaci√≥n
                condition_on_previous_text=False,  # Evitar condicionamiento previo
                fp16=False  # Desactivar FP16 para mayor compatibilidad
            )
            
            # Limpiar archivo temporal si se cre√≥
            if 'temp_path' in locals() and os.path.exists(temp_path):
                os.remove(temp_path)
                print("   üóëÔ∏è  Archivo temporal eliminado")
            
            return result
            
        except Exception as e:
            print(f"‚ùå Error detallado en transcripci√≥n:")
            print(f"   ‚Ä¢ Tipo de error: {type(e).__name__}")
            print(f"   ‚Ä¢ Mensaje: {str(e)}")
            print(f"   ‚Ä¢ Archivo problem√°tico: {audio_path}")
            
            # Informaci√≥n adicional del sistema
            print(f"üîß Informaci√≥n del sistema:")
            print(f"   ‚Ä¢ Python: {os.sys.version}")
            print(f"   ‚Ä¢ Directorio actual: {os.getcwd()}")
            print(f"   ‚Ä¢ Whisper instalado: {hasattr(whisper, '__version__')}")
            
            # Sugerencias de soluci√≥n
            print(f"üí° Posibles soluciones:")
            print(f"   1. Verifica que ffmpeg est√© instalado y en PATH")
            print(f"   2. Intenta con calidad de audio 'medium' o 'low'")
            print(f"   3. Verifica permisos de la carpeta de audio")
            print(f"   4. Reinicia el programa")
            
            raise
        
    def save_transcription(self, text, filename, keywords=None, confidence_info=None):
        """Guardar transcripci√≥n con informaci√≥n adicional"""
        # Crear carpeta output en la ra√≠z del proyecto
        output_dir = os.path.join(self.project_root, "output", filename)
        os.makedirs(output_dir, exist_ok=True)
        filepath = os.path.join(output_dir, f"{filename}.txt")
        
        with open(filepath, "w", encoding="utf-8") as f:
            f.write(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"Modelo: {self.model_size}\n")
            f.write(f"Idioma: {self.language}\n")
            f.write(f"Calidad de audio: {self.audio_quality} ({self.RATE}Hz)\n")
            f.write("-" * 50 + "\n")
            f.write("TRANSCRIPCI√ìN:\n")
            f.write(text)
            f.write("\n\n")
            
            # A√±adir palabras clave si se encontraron
            if keywords:
                f.write("-" * 50 + "\n")
                f.write("PALABRAS CLAVE DETECTADAS:\n")
                for kw in keywords:
                    f.write(f"‚Ä¢ {kw['keyword'].upper()}: {kw['context']}\n")
                f.write("\n")
            
            # A√±adir informaci√≥n de confianza
            if confidence_info:
                f.write("-" * 50 + "\n")
                f.write("AN√ÅLISIS DE CONFIANZA:\n")
                for segment in confidence_info:
                    f.write(f"[{segment['start']:.1f}s-{segment['end']:.1f}s] {segment['confidence_level']}: {segment['text']}\n")
                f.write("\n")
        
        # Guardar tambi√©n en JSON para an√°lisis posterior
        json_filepath = os.path.join(output_dir, f"{filename}.json")
        data = {
            "timestamp": datetime.now().isoformat(),
            "model": self.model_size,
            "language": self.language,
            "audio_quality": self.audio_quality,
            "text": text,
            "keywords": keywords or [],
            "confidence_analysis": confidence_info or []
        }
        
        with open(json_filepath, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        return filepath
        
    def show_main_menu(self):
        """Mostrar men√∫ principal al iniciar"""
        print("\n" + "="*60)
        print("üéôÔ∏è  TRANSCRIPTOR EN TIEMPO REAL - WHISPER")
        print("="*60)
        print(f"üìä Configuraci√≥n actual:")
        print(f"   ‚Ä¢ Modelo: {self.model_size}")
        print(f"   ‚Ä¢ Idioma: {self.language}")
        print(f"   ‚Ä¢ Calidad audio: {self.audio_quality} ({self.RATE}Hz)")
        print("="*60)
        print("1Ô∏è‚É£  Iniciar transcripci√≥n")
        print("2Ô∏è‚É£  Configurar ajustes")
        print("3Ô∏è‚É£  Ver informaci√≥n de modelos")
        print("4Ô∏è‚É£  Salir del programa")
        print("-" * 60)
        print("Elige una opci√≥n (1/2/3/4)...")
        
        while True:
            if keyboard.is_pressed('1'):
                while keyboard.is_pressed('1'): time.sleep(0.1)
                print("‚úÖ Iniciando modo transcripci√≥n...")
                return "transcribe"
                
            elif keyboard.is_pressed('2'):
                while keyboard.is_pressed('2'): time.sleep(0.1)
                print("‚úÖ Abriendo configuraci√≥n...")
                return "config"
                
            elif keyboard.is_pressed('3'):
                while keyboard.is_pressed('3'): time.sleep(0.1)
                print("‚úÖ Mostrando informaci√≥n de modelos...")
                return "models"
                
            elif keyboard.is_pressed('4') or keyboard.is_pressed('esc'):
                while keyboard.is_pressed('4') or keyboard.is_pressed('esc'): time.sleep(0.1)
                print("‚úÖ Saliendo del programa...")
                return "exit"
            
            time.sleep(0.1)
    
    def show_model_info(self):
        """Mostrar informaci√≥n de modelos disponibles"""
        print("\n" + "="*60)
        print("üìã MODELOS WHISPER DISPONIBLES")
        print("="*60)
        
        model_info = {
            "tiny": {"size": "39 MB", "speed": "~32x", "quality": "‚≠ê‚≠ê"},
            "base": {"size": "74 MB", "speed": "~16x", "quality": "‚≠ê‚≠ê‚≠ê"},
            "small": {"size": "244 MB", "speed": "~6x", "quality": "‚≠ê‚≠ê‚≠ê‚≠ê"},
            "medium": {"size": "769 MB", "speed": "~2x", "quality": "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"},
            "large-v1": {"size": "1550 MB", "speed": "1x", "quality": "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"},
            "large-v2": {"size": "1550 MB", "speed": "1x", "quality": "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"},
            "large-v3": {"size": "1550 MB", "speed": "1x", "quality": "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"},
            "turbo": {"size": "809 MB", "speed": "~8x", "quality": "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"}
        }
        
        for model, info in model_info.items():
            current = " ‚Üê ACTUAL" if model == self.model_size else ""
            print(f"üî∏ {model:8} | {info['size']:8} | {info['speed']:4} | {info['quality']} {current}")
        
        print("-" * 60)
        print("üí° Recomendaciones:")
        print("   üöÄ Para velocidad: tiny, base")
        print("   ‚öñÔ∏è  Balance: small, turbo")
        print("   üéØ M√°xima calidad: medium, large")
        print("   üéÆ Tu RTX 3060: Cualquier modelo funciona bien")
        
        print("\nPresiona ENTER para volver al men√∫ principal...")
        while True:
            if keyboard.is_pressed('enter'):
                while keyboard.is_pressed('enter'): time.sleep(0.1)
                break
            time.sleep(0.1)
    def run_continuous(self):
        """Flujo principal del programa"""
        # Mostrar men√∫ principal primero
        while True:
            choice = self.show_main_menu()
            
            if choice == "transcribe":
                self.start_transcription_mode()
            elif choice == "config":
                self.show_config_menu()
            elif choice == "models":
                self.show_model_info()
            elif choice == "exit":
                print("\nüëã ¬°Hasta luego!")
                return
    
    def start_transcription_mode(self):
        """Modo de transcripci√≥n (el c√≥digo anterior)"""
        # Cargar modelo solo cuando se necesite
        if self.model is None:
            self.load_model()
        
        session_num = 1
        last_transcription = ""
        last_transcription_file = ""
        
        print("\n" + "="*60)
        print("üéôÔ∏è  MODO TRANSCRIPCI√ìN ACTIVADO")
        print("="*60)
        print("Controles durante grabaci√≥n:")
        print("  ESPACIO: Parar grabaci√≥n y transcribir")
        print("  ESC: Volver al men√∫ principal")
        print("="*60)
        
        try:
            while True:
                print(f"\n--- SESI√ìN {session_num} ---")
                
                # Si hay transcripci√≥n previa, mostrar men√∫ de sesi√≥n
                if session_num > 1:
                    choice = self.show_session_menu()
                    if choice == "nueva":
                        pass  # Contin√∫a con nueva grabaci√≥n
                    elif choice == "mostrar":
                        self.show_last_transcription(last_transcription, last_transcription_file)
                        continue  # Volver al men√∫
                    elif choice == "config":
                        self.show_config_menu()
                        continue  # Volver al men√∫
                    elif choice == "menu_principal":
                        return  # Volver al men√∫ principal
                    elif choice == "salir":
                        print("\nüëã ¬°Hasta luego!")
                        exit()
                
                print("üé§ Presiona ENTER para empezar a grabar...")
                
                # Esperar ENTER para empezar
                start_recording = False
                while not start_recording:
                    if keyboard.is_pressed('enter'):
                        start_recording = True
                    elif keyboard.is_pressed('esc'):
                        return  # Volver al men√∫ principal
                    time.sleep(0.1)
                
                # Empezar grabaci√≥n en hilo separado
                recording_thread = threading.Thread(target=self.start_recording)
                recording_thread.start()
                
                # Esperar ESPACIO para parar o ESC para salir
                while self.is_recording:
                    if keyboard.is_pressed('space'):
                        self.stop_recording()
                        break
                    elif keyboard.is_pressed('esc'):
                        self.stop_recording()
                        recording_thread.join()
                        return  # Volver al men√∫ principal
                    time.sleep(0.1)
                
                recording_thread.join()
                
                if len(self.audio_frames) > 0:
                    # Guardar audio
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    audio_filename = f"grabacion_{timestamp}.wav"
                    
                    try:
                        audio_path = self.save_audio(audio_filename)
                        print(f"üíæ Audio guardado: {audio_path}")
                        
                        # Transcribir
                        result = self.transcribe_audio(audio_path)
                        transcription = result["text"]
                        
                        # An√°lisis de palabras clave
                        keywords = self.extract_keywords(transcription)
                        
                        # An√°lisis de confianza
                        confidence_info = self.analyze_confidence(result)
                        
                        print("\n" + "="*50)
                        print("üìù TRANSCRIPCI√ìN:")
                        print("="*50)
                        print(transcription)
                        
                        # Mostrar palabras clave si se encontraron
                        if keywords:
                            print("\n" + "üîç PALABRAS CLAVE DETECTADAS:")
                            print("-" * 30)
                            for kw in keywords[:5]:  # Mostrar solo las primeras 5
                                print(f"üîë {kw['keyword'].upper()}: {kw['context']}")
                        
                        # Mostrar an√°lisis de confianza
                        if confidence_info:
                            print(f"\nüìä AN√ÅLISIS DE CONFIANZA:")
                            print("-" * 30)
                            for segment in confidence_info[:3]:  # Mostrar solo los primeros 3
                                print(f"{segment['confidence_level']} [{segment['start']:.1f}s]: {segment['text'][:50]}...")
                        
                        print("="*50)
                        
                        # Guardar transcripci√≥n con toda la informaci√≥n
                        trans_filename = f"transcripcion_{timestamp}"
                        trans_path = self.save_transcription(transcription, trans_filename, keywords, confidence_info)
                        print(f"üíæ Transcripci√≥n guardada: {trans_path}")
                        
                        # Guardar para mostrar en men√∫
                        last_transcription = transcription
                        last_transcription_file = trans_path
                        
                    except Exception as e:
                        print(f"‚ùå Error en el proceso: {e}")
                        last_transcription = ""
                        last_transcription_file = ""
                else:
                    print("‚ö†Ô∏è  No se grab√≥ audio")
                    last_transcription = ""
                    last_transcription_file = ""
                
                session_num += 1
                time.sleep(1)  # Pausa peque√±a
                
        except KeyboardInterrupt:
            print("\nüëã ¬°Hasta luego!")
        finally:
            self.cleanup()
    
    def show_session_menu(self):
        """Mostrar men√∫ entre sesiones"""
        print("\n" + "="*50)
        print("üìã ¬øQU√â QUIERES HACER?")
        print("="*50)
        print("1Ô∏è‚É£  Iniciar nueva grabaci√≥n")
        print("2Ô∏è‚É£  Ver √∫ltima transcripci√≥n")
        print("3Ô∏è‚É£  Configurar ajustes")
        print("4Ô∏è‚É£  Volver al men√∫ principal")
        print("5Ô∏è‚É£  Salir del programa")
        print("-" * 50)
        print("Elige una opci√≥n (1/2/3/4/5)...")
        
        option_selected = False
        
        while not option_selected:
            # Detectar teclas con control de estado
            if keyboard.is_pressed('1'):
                print("‚úÖ Nueva grabaci√≥n seleccionada")
                # Esperar a que se suelte la tecla
                while keyboard.is_pressed('1'):
                    time.sleep(0.1)
                return "nueva"
                
            elif keyboard.is_pressed('2'):
                print("‚úÖ Mostrar transcripci√≥n seleccionada")
                # Esperar a que se suelte la tecla
                while keyboard.is_pressed('2'):
                    time.sleep(0.1)
                return "mostrar"
                
            elif keyboard.is_pressed('3'):
                print("‚úÖ Configuraci√≥n seleccionada")
                # Esperar a que se suelte la tecla
                while keyboard.is_pressed('3'):
                    time.sleep(0.1)
                return "config"
                
            elif keyboard.is_pressed('4'):
                print("‚úÖ Volver al men√∫ principal")
                # Esperar a que se suelte la tecla
                while keyboard.is_pressed('4'):
                    time.sleep(0.1)
                return "menu_principal"
                
            elif keyboard.is_pressed('5') or keyboard.is_pressed('esc'):
                print("‚úÖ Salir seleccionado")
                # Esperar a que se suelte la tecla
                while keyboard.is_pressed('5') or keyboard.is_pressed('esc'):
                    time.sleep(0.1)
                return "salir"
            
            time.sleep(0.1)
    
    def show_config_menu(self):
        """Mostrar men√∫ de configuraci√≥n"""
        while True:
            print("\n" + "="*50)
            print("‚öôÔ∏è  CONFIGURACI√ìN")
            print("="*50)
            print(f"1Ô∏è‚É£  Modelo Whisper: {self.model_size}")
            print(f"2Ô∏è‚É£  Calidad de audio: {self.audio_quality} ({self.RATE}Hz)")
            print(f"3Ô∏è‚É£  Gestionar palabras clave ({len(self.keywords)} actuales)")
            print("4Ô∏è‚É£  Volver al men√∫ principal")
            print("-" * 50)
            print("Elige una opci√≥n (1-4)...")
            
            while True:
                if keyboard.is_pressed('1'):
                    while keyboard.is_pressed('1'): time.sleep(0.1)
                    self.change_model()
                    break
                elif keyboard.is_pressed('2'):
                    while keyboard.is_pressed('2'): time.sleep(0.1)
                    self.change_audio_quality()
                    break
                elif keyboard.is_pressed('3'):
                    while keyboard.is_pressed('3'): time.sleep(0.1)
                    self.manage_keywords()
                    break
                elif keyboard.is_pressed('4') or keyboard.is_pressed('esc'):
                    while keyboard.is_pressed('4') or keyboard.is_pressed('esc'): time.sleep(0.1)
                    return
                time.sleep(0.1)
    
    def change_model(self):
        """Cambiar modelo de Whisper"""
        models = ["tiny", "base", "small", "medium", "large-v1", "large-v2", "large-v3", "turbo"]
        
        print("\n" + "="*50)
        print("üß† SELECCIONAR MODELO WHISPER")
        print("="*50)
        print("Modelos disponibles (compatibles con espa√±ol):")
        
        for i, model in enumerate(models, 1):
            current = " ‚Üê ACTUAL" if model == self.model_size else ""
            size_info = {
                "tiny": "39 MB - Muy r√°pido",
                "base": "74 MB - Equilibrado", 
                "small": "244 MB - Buena calidad",
                "medium": "769 MB - Alta calidad",
                "large-v1": "1550 MB - M√°xima calidad v1",
                "large-v2": "1550 MB - M√°xima calidad v2",
                "large-v3": "1550 MB - M√°xima calidad v3 (recomendado)",
                "turbo": "809 MB - R√°pido y buena calidad"
            }
            print(f"{i}Ô∏è‚É£  {model:10} ({size_info[model]}){current}")
        
        print("9Ô∏è‚É£  Cancelar")
        print("-" * 50)
        print("Elige un modelo (1-9)...")
        
        while True:
            for i, model in enumerate(models, 1):
                if keyboard.is_pressed(str(i)):
                    while keyboard.is_pressed(str(i)): time.sleep(0.1)
                    
                    if model != self.model_size:
                        old_model = self.model_size
                        self.model_size = model
                        
                        # Si ya hab√≠a un modelo cargado, necesitamos recargarlo
                        if self.model is not None:
                            print(f"üîÑ Cambiando de {old_model} a {model}...")
                            print("‚ö†Ô∏è  Se recargar√° el modelo en la pr√≥xima transcripci√≥n")
                            self.model = None  # Forzar recarga
                        
                        print(f"‚úÖ Modelo cambiado a: {model}")
                    else:
                        print(f"‚ÑπÔ∏è  Ya est√°s usando el modelo {model}")
                    
                    time.sleep(1.5)
                    return
            
            if keyboard.is_pressed('9') or keyboard.is_pressed('esc'):
                while keyboard.is_pressed('9') or keyboard.is_pressed('esc'): time.sleep(0.1)
                print("‚ùå Cambio de modelo cancelado")
                time.sleep(1)
                return
            
            time.sleep(0.1)

    def change_audio_quality(self):
        """Cambiar calidad de audio"""
        qualities = ["low", "medium", "high", "ultra"]
        current_index = qualities.index(self.audio_quality)
        next_index = (current_index + 1) % len(qualities)
        
        self.audio_quality = qualities[next_index]
        self.setup_audio_config()
        
        print(f"‚úÖ Calidad cambiada a: {self.audio_quality} ({self.RATE}Hz)")
        time.sleep(1)
    
    def manage_keywords(self):
        """Gestionar palabras clave"""
        print("\nüîë PALABRAS CLAVE ACTUALES:")
        for i, kw in enumerate(self.keywords[:10], 1):
            print(f"{i:2d}. {kw}")
        if len(self.keywords) > 10:
            print(f"    ... y {len(self.keywords) - 10} m√°s")
        
        print("\nPresiona ENTER para continuar...")
        while True:
            if keyboard.is_pressed('enter'):
                while keyboard.is_pressed('enter'): time.sleep(0.1)
                break
            time.sleep(0.1)
    
    def show_last_transcription(self, transcription, file_path):
        """Mostrar la √∫ltima transcripci√≥n"""
        print("\n" + "="*60)
        print("üìÑ √öLTIMA TRANSCRIPCI√ìN")
        print("="*60)
        
        if transcription:
            print(transcription)
            print("-" * 60)
            print(f"üìÅ Archivo: {file_path}")
        else:
            print("‚ö†Ô∏è  No hay transcripci√≥n disponible")
        
        print("="*60)
        print("Presiona ENTER para volver al men√∫...")
        
        # Esperar ENTER espec√≠ficamente
        key_pressed = False
        while not key_pressed:
            if keyboard.is_pressed('enter'):
                # Esperar a que se suelte la tecla
                while keyboard.is_pressed('enter'):
                    time.sleep(0.1)
                key_pressed = True
            time.sleep(0.1)
            
    def cleanup(self):
        """Limpiar recursos"""
        if self.stream:
            self.stream.close()
        self.audio.terminate()

def main():
    import sys
    
    # Argumentos opcionales
    if len(sys.argv) == 1:
        # Sin argumentos
        model_size = "base"
        language = "es"
    elif len(sys.argv) == 2:
        # Un argumento: puede ser modelo o idioma
        arg = sys.argv[1]
        if arg in ['tiny', 'base', 'small', 'medium', 'large', 'large-v1', 'large-v2', 'large-v3', 'turbo']:
            model_size = arg
            language = "es"
        else:
            model_size = "base"
            language = arg
    else:
        # Dos o m√°s argumentos: modelo e idioma
        model_size = sys.argv[1]
        language = sys.argv[2]
    
    print(f"Configuraci√≥n: Modelo={model_size}, Idioma={language}")
    
    # VERIFICACI√ìN INICIAL DEL SISTEMA
    print("\nüîß Verificando dependencias del sistema...")
    
    # Verificar ffmpeg
    import subprocess
    try:
        result = subprocess.run(['ffmpeg', '-version'], capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            print("‚úÖ FFmpeg encontrado y funcionando")
        else:
            print("‚ö†Ô∏è  FFmpeg encontrado pero puede tener problemas")
    except (subprocess.TimeoutExpired, FileNotFoundError, subprocess.SubprocessError):
        print("‚ùå FFmpeg NO encontrado o no funciona")
        print("üí° Instala FFmpeg desde: https://ffmpeg.org/download.html")
        print("   Y aseg√∫rate de que est√© en tu PATH del sistema")
        
        response = input("\n¬øQuieres continuar de todos modos? (s/n): ")
        if response.lower() not in ['s', 's√≠', 'si', 'y', 'yes']:
            print("üëã Saliendo del programa...")
            return
    
    # Verificar librosa
    try:
        import librosa
        print("‚úÖ Librosa disponible")
    except ImportError:
        print("‚ö†Ô∏è  Librosa no encontrado, instalando...")
        try:
            subprocess.run([sys.executable, '-m', 'pip', 'install', 'librosa'], check=True)
            print("‚úÖ Librosa instalado correctamente")
        except subprocess.CalledProcessError:
            print("‚ùå Error instalando librosa")
    
    # Verificar permisos de escritura
    import tempfile
    try:
        with tempfile.NamedTemporaryFile(delete=True) as tmp:
            tmp.write(b"test")
        print("‚úÖ Permisos de escritura OK")
    except Exception as e:
        print(f"‚ùå Problemas con permisos de escritura: {e}")
    
    print("üöÄ Iniciando transcriptor...")
    
    transcriber = RealtimeTranscriber(model_size, language)
    transcriber.run_continuous()

if __name__ == "__main__":
    main()